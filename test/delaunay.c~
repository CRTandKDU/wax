/*****************************************
 * delaunay                              *
 *****************************************/
/* Compiled by WAXC (Version May 28 2024)*/

/*=== WAX Standard Library BEGIN ===*/
#ifndef WAX_STD
#define WAX_STD
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include <stdint.h>
#include <math.h>
#define W_MIN(a,b) (((a)<(b))?(a):(b))
#define W_MAX(a,b) (((a)>(b))?(a):(b))
void *w_malloc(size_t size){void *mem = malloc(size);if(!mem){exit(-1);}return mem;}
void *w_realloc(void* curr_mem, size_t size){void *mem = realloc(curr_mem, size);if(!mem){exit(-1);}return mem;}
void w_free(void* x){if (x){free(x);}}
typedef struct w_arr_st {void* data;size_t len;size_t cap;size_t elem_size;} w_arr_t;
w_arr_t* w_arr_new_impl(int elem_size){w_arr_t* arr = (w_arr_t*)w_malloc(sizeof(w_arr_t));arr->elem_size = elem_size;arr->len = 0;arr->cap = 16;arr->data = w_malloc((arr->cap)*elem_size);return arr;}
w_arr_t* w_arr_new_ints(int count,...){va_list vals;w_arr_t* arr = (w_arr_t*)w_malloc(sizeof(w_arr_t));arr->elem_size = sizeof(int);arr->len = count;arr->cap = count;arr->data = w_malloc((arr->cap)*arr->elem_size);va_start(vals, count);for (int i = 0; i < count; i++) {((int*)arr->data)[i]=va_arg(vals, int);}va_end(vals);return arr;}
w_arr_t* w_arr_new_flts(int count,...){va_list vals;w_arr_t* arr = (w_arr_t*)w_malloc(sizeof(w_arr_t));arr->elem_size = sizeof(float);arr->len = count;arr->cap = count;arr->data = w_malloc((arr->cap)*arr->elem_size);va_start(vals, count);for (int i = 0; i < count; i++) {((float*)arr->data)[i]=(float)va_arg(vals, double);}va_end(vals);return arr;}
w_arr_t* w_arr_new_strs(int count,...){va_list vals;w_arr_t* arr = (w_arr_t*)w_malloc(sizeof(w_arr_t));arr->elem_size = sizeof(char*);arr->len = count;arr->cap = count;arr->data = w_malloc((arr->cap)*arr->elem_size);va_start(vals, count);for (int i = 0; i < count; i++) {((char**)arr->data)[i]=(char*)va_arg(vals, char*);}va_end(vals);return arr;}
int* w_vec_new_ints(int count,...){va_list vals;int* vec = (int*)w_malloc(sizeof(int)*count);va_start(vals, count);for (int i = 0; i < count; i++) {vec[i]=va_arg(vals, int);}va_end(vals);return vec;}
float* w_vec_new_flts(int count,...){va_list vals;float* vec = (float*)w_malloc(sizeof(float)*count);va_start(vals, count);for (int i = 0; i < count; i++) {vec[i]=(float)va_arg(vals, double);}va_end(vals);return vec;}
char** w_vec_new_strs(int count,...){va_list vals;char** vec = (char**)w_malloc(sizeof(char*)*count);va_start(vals, count);for (int i = 0; i < count; i++) {vec[i]=va_arg(vals, char*);}va_end(vals);return vec;}
#define w_arr_new(type)         (w_arr_new_impl(sizeof(type)))
#define w_arr_get(type,arr,i  ) (((type *)((arr)->data))[(i)])
#define w_arr_set(type,arr,i,x) (((type *)((arr)->data))[(i)]=(x))
void w_arr_insert_impl(w_arr_t* arr,int i) {if ((arr)->len >= (arr)->cap){(arr)->cap = (arr)->cap+W_MAX(4,(arr)->cap/2);(arr)->data = w_realloc((arr)->data, (arr)->elem_size*((arr)->cap));}if ((i) < (arr)->len){memmove((char*)((arr)->data)+((i)+1)*(arr)->elem_size,(char*)((arr)->data)+(i)*(arr)->elem_size,((arr)->len-(i))*(arr)->elem_size );}(arr)->len++;}
#define w_arr_insert(type,arr,i,x) { type tmp__x_ = x; int tmp__i_ = i; w_arr_t* tmp__a_ = arr; w_arr_insert_impl((tmp__a_),(tmp__i_)); (((type *)((tmp__a_)->data))[(tmp__i_)]=(tmp__x_)); }
void w_arr_remove(w_arr_t* arr,int i,int n) {memmove((char*)((arr)->data)+(i)*(arr)->elem_size,(char*)((arr)->data)+((i)+(n))*(arr)->elem_size,((arr->len)-(i)-(n))*(arr)->elem_size );(arr)->len-=(n);}
w_arr_t* w_arr_slice(w_arr_t*arr,int i,int n) {w_arr_t* brr = (w_arr_t*)w_malloc(sizeof(w_arr_t));brr->elem_size = (arr)->elem_size;brr->len = n;brr->cap = n;brr->data = w_malloc((brr->cap)*(brr->elem_size));memcpy((char*)(brr->data), (char*)((arr)->data) + (i), (n)*((arr)->elem_size));return brr;}
#define W_NUM_MAP_SLOTS 64
typedef struct w_slot_st {int keylen;void* key;int64_t data;struct w_slot_st* next;} w_slot_t;
typedef struct w_map_st {int key_is_ptr;size_t len;w_slot_t* slots[W_NUM_MAP_SLOTS];} w_map_t;
w_map_t* w_map_new(char key_is_ptr){w_map_t* map = (w_map_t*)w_malloc(sizeof(w_map_t));map->key_is_ptr = key_is_ptr;for (int i = 0; i < W_NUM_MAP_SLOTS; i++){map->slots[i] = NULL;}map->len = 0;return map;}
int w_map_hash(void* ptr, size_t len){int x = 0;for (size_t i = 0; i < len; i++){unsigned char y = *((unsigned char*)((unsigned char*)ptr+i));x ^= y;}x %= W_NUM_MAP_SLOTS;return x;}
void w_map_set(w_map_t* map, int64_t key, int64_t data){int keylen;void* keyptr;if (map->key_is_ptr){keylen = strlen((char*)key);keyptr = (char*)key;}else{keylen = sizeof(key);keyptr = &key;}int k = w_map_hash(keyptr,keylen);w_slot_t* it = map->slots[k];while (it){if (keylen == it->keylen){if (memcmp(it->key,keyptr,keylen)==0){it->data = data;return;}}it = it -> next;}w_slot_t* nxt = map->slots[k];w_slot_t* slot = (w_slot_t*)w_malloc(sizeof(w_slot_t));slot->key = w_malloc(keylen);memcpy(slot->key,keyptr,keylen);slot->data=data;slot->next = nxt;slot->keylen = keylen;map->slots[k] = slot;map->len++;}
int64_t w_map_get(w_map_t* map, int64_t key){int keylen;void* keyptr;if (map->key_is_ptr){keylen = strlen((char*)key);keyptr = (char*)key;}else{keylen = sizeof(key);keyptr = &key;}int k = w_map_hash(keyptr,keylen);w_slot_t* it = map->slots[k];while (it){if (keylen == it->keylen){if (memcmp(it->key,keyptr,keylen)==0){return it->data;}}it = it -> next;}return 0;}
void w_map_remove(w_map_t* map, int64_t key){size_t keylen;void* keyptr;if (map->key_is_ptr){keylen = strlen((char*)key);keyptr = (char*)key;}else{keylen = sizeof(key);keyptr = &key;}int k = w_map_hash(keyptr,keylen);w_slot_t* it = map->slots[k];w_slot_t* prev = NULL;while (it){if (keylen == it->keylen){if (memcmp(it->key,keyptr,keylen)==0){if (prev){prev->next = it->next;}else{map->slots[k] = it->next;}map->len--;w_free(it->key);w_free(it);return;}}prev = it;it = it -> next;}return;}
int w_reinterp_f2i(float x){return *((int *)&x);}
float w_reinterp_i2f(int x){return *((float *)&x);}
typedef struct {char data[32];} w_shortstr_t;
w_shortstr_t w_int2str(int x){w_shortstr_t str;sprintf(str.data, "%d", x);return str;}
w_shortstr_t w_flt2str(float x){w_shortstr_t str;sprintf(str.data, "%g", x);return str;}
char* w_str_new(char* x){size_t l = strlen(x);char* str = (char*)w_malloc(l);strncpy(str,x,l);str[l] = 0;return str;}
char* w_str_cat(char* x, char* y){size_t l0 = strlen(x);size_t l1 = strlen(y);x = (char*)w_realloc(x,l0+l1+1);memcpy(x+l0,y,l1);x[l0+l1] = 0;return x;}
char* w_str_add(char* x, int y){char c = (char)y;size_t l = strlen(x);x = (char*)w_realloc(x,l+2);x[l] = c;x[l+1]=0;return x;}
char* w_str_cpy(char* x, int i, int l){char* y = (char*)w_malloc(l+1);memcpy(y,x+i,l);y[l] = 0;return y;}
void w_free_arr(w_arr_t* x){if (x){w_free(x->data);w_free(x);}}
void w_free_map(w_map_t* map){if (!map){return;}for (int i = 0; i < W_NUM_MAP_SLOTS; i++){w_slot_t* it = map->slots[i];while (it){w_slot_t* nxt = it->next;w_free(it->key);w_free(it);it = nxt;}}w_free(map);}
#endif
/*=== WAX Standard Library END   ===*/

/*=== User Code            BEGIN ===*/

#define random() ((float)rand()/RAND_MAX)
int circumcircle(float xp,float yp,float x1,float y1,float x2,float y2,float x3,float y3,float* xcycr){
  float m1=0;
  float m2=0;
  float mx1=0;
  float mx2=0;
  float my1=0;
  float my2=0;
  float dx=0;
  float dy=0;
  float drsqr=0;
  float fabsy1y2=0;
  (fabsy1y2=fabs((y1-y2)));
  float fabsy2y3=0;
  (fabsy2y3=fabs((y2-y3)));
  float xc=0;
  float yc=0;
  float rsqr=0;
  if(((fabsy1y2<0.0000001)&&(fabsy2y3<0.0000001))){
    return 0;
  };
  if((fabsy1y2<0.0000001)){
    (m2=(0.0-((x3-x2)/(y3-y2))));
    (mx2=((x2+x3)/2.0));
    (my2=((y2+y3)/2.0));
    (xc=((x2+x1)/2.0));
    (yc=((m2*(xc-mx2))+my2));
  }else{
    if((fabsy2y3<0.0000001)){
      (m1=(0.0-((x2-x1)/(y2-y1))));
      (mx1=((x1+x2)/2.0));
      (my1=((y1+y2)/2.0));
      (xc=((x3+x2)/2.0));
      (yc=((m1*(xc-mx1))+my1));
    }else{
      (m1=(0.0-((x2-x1)/(y2-y1))));
      (m2=(0.0-((x3-x2)/(y3-y2))));
      (mx1=((x1+x2)/2.0));
      (mx2=((x2+x3)/2.0));
      (my1=((y1+y2)/2.0));
      (my2=((y2+y3)/2.0));
      (xc=(((((m1*mx1)+(0.0-(m2*mx2)))+my2)+(0.0-my1))/(m1-m2)));
      if((fabsy1y2>fabsy2y3)){
        (yc=((m1*(xc-mx1))+my1));
      }else{
        (yc=((m2*(xc-mx2))+my2));
      };
    };
  };
  (dx=(x2-xc));
  (dy=(y2-yc));
  (rsqr=((dx*dx)+(dy*dy)));
  (dx=(xp-xc));
  (dy=(yp-yc));
  (drsqr=((dx*dx)+(dy*dy)));
  ((xcycr)[0])=xc;
  ((xcycr)[1])=yc;
  ((xcycr)[2])=rsqr;
  return ((drsqr-rsqr)<=0.0000001);
}
w_arr_t* delaunaytriangulate(w_arr_t* pxyz){
  int nv=0;
  (nv=(pxyz->len));
  int inside=0;
  float xp=0;
  float yp=0;
  float x1=0;
  float y1=0;
  float x2=0;
  float y2=0;
  float x3=0;
  float y3=0;
  float xmin=0;
  float xmax=0;
  float ymin=0;
  float ymax=0;
  float xmid=0;
  float ymid=0;
  float dx=0;
  float dy=0;
  float dmax=0;
  float* xcycr=0;
  (xcycr=(float*)calloc(sizeof(float),3));
  w_arr_t* complete=0;
  (complete=w_arr_new(int));
  w_arr_t* v=0;
  (v=w_arr_new(int*));
  if(((pxyz->len)<3)){
    w_free_arr(complete);
    w_free(xcycr);
    return v;
  };
  (xmin=((((float*)w_arr_get(float*,pxyz,0)))[0]));
  (ymin=((((float*)w_arr_get(float*,pxyz,0)))[1]));
  (xmax=xmin);
  (ymax=ymin);
  for(int i=1;(i<nv);i+=1){
    if((((((float*)w_arr_get(float*,pxyz,i)))[0])<xmin)){
      (xmin=((((float*)w_arr_get(float*,pxyz,i)))[0]));
    };
    if((((((float*)w_arr_get(float*,pxyz,i)))[0])>xmax)){
      (xmax=((((float*)w_arr_get(float*,pxyz,i)))[0]));
    };
    if((((((float*)w_arr_get(float*,pxyz,i)))[1])<ymin)){
      (ymin=((((float*)w_arr_get(float*,pxyz,i)))[1]));
    };
    if((((((float*)w_arr_get(float*,pxyz,i)))[1])>ymax)){
      (ymax=((((float*)w_arr_get(float*,pxyz,i)))[1]));
    };
  };
  (dx=(xmax-xmin));
  (dy=(ymax-ymin));
  (dmax=(((dx>dy))?(dx):(dy)));
  (xmid=((xmax+xmin)/((float)2)));
  (ymid=((ymax+ymin)/((float)2)));
  w_arr_insert(float*,pxyz,(pxyz->len),w_vec_new_flts(2,((xmid-(2.0*dmax))),((ymid-dmax))));
  w_arr_insert(float*,pxyz,(pxyz->len),w_vec_new_flts(2,(xmid),((ymid+(2.0*dmax)))));
  w_arr_insert(float*,pxyz,(pxyz->len),w_vec_new_flts(2,((xmid+(2.0*dmax))),((ymid-dmax))));
  w_arr_insert(int*,v,0,w_vec_new_ints(3,(nv),((nv+1)),((nv+2))));
  w_arr_insert(int,complete,0,0);
  for(int i=0;(i<nv);i+=1){
    (xp=((((float*)w_arr_get(float*,pxyz,i)))[0]));
    (yp=((((float*)w_arr_get(float*,pxyz,i)))[1]));
    w_arr_t* edges=0;
    (edges=w_arr_new(int*));
    for(int j=((v->len)-1);(j>=0);j+=-1){
      if((!((int)w_arr_get(int,complete,j)))){
        (x1=((((float*)w_arr_get(float*,pxyz,((((int*)w_arr_get(int*,v,j)))[0]))))[0]));
        (y1=((((float*)w_arr_get(float*,pxyz,((((int*)w_arr_get(int*,v,j)))[0]))))[1]));
        (x2=((((float*)w_arr_get(float*,pxyz,((((int*)w_arr_get(int*,v,j)))[1]))))[0]));
        (y2=((((float*)w_arr_get(float*,pxyz,((((int*)w_arr_get(int*,v,j)))[1]))))[1]));
        (x3=((((float*)w_arr_get(float*,pxyz,((((int*)w_arr_get(int*,v,j)))[2]))))[0]));
        (y3=((((float*)w_arr_get(float*,pxyz,((((int*)w_arr_get(int*,v,j)))[2]))))[1]));
        (inside=circumcircle(xp,yp,x1,y1,x2,y2,x3,y3,xcycr));
        float xc=0;
        (xc=((xcycr)[0]));
        float r=0;
        (r=((xcycr)[2]));
        if(((xc<xp)&&(((xp-xc)*(xp-xc))>r))){
          w_arr_set(int,complete,j,1);
        };
        if(inside){
          w_arr_insert(int*,edges,(edges->len),w_vec_new_ints(2,(((((int*)w_arr_get(int*,v,j)))[0])),(((((int*)w_arr_get(int*,v,j)))[1]))));
          w_arr_insert(int*,edges,(edges->len),w_vec_new_ints(2,(((((int*)w_arr_get(int*,v,j)))[1])),(((((int*)w_arr_get(int*,v,j)))[2]))));
          w_arr_insert(int*,edges,(edges->len),w_vec_new_ints(2,(((((int*)w_arr_get(int*,v,j)))[2])),(((((int*)w_arr_get(int*,v,j)))[0]))));
          w_free(((int*)w_arr_get(int*,v,j)));
          w_arr_remove((v,j,1);
          w_arr_remove((complete,j,1);
        };
      };
    };
    for(int j=0;(j<((edges->len)-1));j+=1){
      for(int k=(j+1);(k<(edges->len));k+=1){
        if(((!!(((((int*)w_arr_get(int*,edges,j)))[0])==((((int*)w_arr_get(int*,edges,k)))[1])))&&(!!(((((int*)w_arr_get(int*,edges,j)))[1])==((((int*)w_arr_get(int*,edges,k)))[0]))))){
          ((((int*)w_arr_get(int*,edges,j)))[0])=-1;
          ((((int*)w_arr_get(int*,edges,j)))[1])=-1;
          ((((int*)w_arr_get(int*,edges,k)))[0])=-1;
          ((((int*)w_arr_get(int*,edges,k)))[1])=-1;
        };
        if(((!!(((((int*)w_arr_get(int*,edges,j)))[0])==((((int*)w_arr_get(int*,edges,k)))[0])))&&(!!(((((int*)w_arr_get(int*,edges,j)))[1])==((((int*)w_arr_get(int*,edges,k)))[1]))))){
          ((((int*)w_arr_get(int*,edges,j)))[0])=-1;
          ((((int*)w_arr_get(int*,edges,j)))[1])=-1;
          ((((int*)w_arr_get(int*,edges,k)))[0])=-1;
          ((((int*)w_arr_get(int*,edges,k)))[1])=-1;
        };
      };
    };
    for(int j=0;(j<(edges->len));j+=1){
      if(((((((int*)w_arr_get(int*,edges,j)))[0])<0)||(((((int*)w_arr_get(int*,edges,j)))[1])<0))){
      
      }else{
        w_arr_insert(int*,v,(v->len),w_vec_new_ints(3,(((((int*)w_arr_get(int*,edges,j)))[0])),(((((int*)w_arr_get(int*,edges,j)))[1])),(i)));
        w_arr_insert(int,complete,(complete->len),0);
      };
      w_free(((int*)w_arr_get(int*,edges,j)));
    };
    w_free_arr(edges);
  };
  for(int i=((v->len)-1);(i>=0);i+=-1){
    if((((((((int*)w_arr_get(int*,v,i)))[0])>=nv)||(((((int*)w_arr_get(int*,v,i)))[1])>=nv))||(((((int*)w_arr_get(int*,v,i)))[0])>=nv))){
      w_free(((int*)w_arr_get(int*,v,i)));
      w_arr_remove((v,i,1);
    };
  };
  w_free_arr(complete);
  w_free(xcycr);
  return v;
}
int comparex(float* v1,float* v2){
  if((((v1)[0])<((v2)[0]))){
    return -1;
  }else{
    if((((v1)[0])>((v2)[0]))){
      return 1;
    };
  };
  return 0;
}
void sortbyx(w_arr_t* A,int lo,int hi){
  if((lo>=hi)){
    return;
  };
  float* pivot=0;
  (pivot=((float*)w_arr_get(float*,A,lo)));
  int left=0;
  (left=lo);
  int right=0;
  (right=hi);
  while((left<=right)){
    while((comparex(((float*)w_arr_get(float*,A,left)),pivot)<0)){
      (left=(left+1));
    };
    while((comparex(((float*)w_arr_get(float*,A,right)),pivot)>0)){
      (right=(right-1));
    };
    if((left<=right)){
      float* tmp=0;
      (tmp=((float*)w_arr_get(float*,A,left)));
      w_arr_set(float*,A,left,((float*)w_arr_get(float*,A,right)));
      w_arr_set(float*,A,right,tmp);
      (left=(left+1));
      (right=(right-1));
    };
  };
  sortbyx(A,lo,right);
  sortbyx(A,left,hi);
}
char* render_svg(int w,int h,w_arr_t* pxyz,w_arr_t* triangles){
  char* s=0;
  (s=w_str_new("<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" width=\""));
  (s=w_str_cat(s,w_int2str(w).data));
  (s=w_str_cat(s,"\" height=\""));
  (s=w_str_cat(s,w_int2str(h).data));
  (s=w_str_cat(s,"\">"));
  for(int i=0;(i<(pxyz->len));i+=1){
    (s=w_str_cat(s,"<circle cx=\""));
    (s=w_str_cat(s,w_flt2str(((((float*)w_arr_get(float*,pxyz,i)))[0])).data));
    (s=w_str_cat(s,"\" cy=\""));
    (s=w_str_cat(s,w_flt2str(((((float*)w_arr_get(float*,pxyz,i)))[1])).data));
    (s=w_str_cat(s,"\" r=\"2\" />"));
  };
  for(int i=0;(i<(triangles->len));i+=1){
    (s=w_str_cat(s,"<path d=\"M"));
    (s=w_str_cat(s,w_flt2str(((((float*)w_arr_get(float*,pxyz,((((int*)w_arr_get(int*,triangles,i)))[0]))))[0])).data));
    (s=w_str_cat(s,","));
    (s=w_str_cat(s,w_flt2str(((((float*)w_arr_get(float*,pxyz,((((int*)w_arr_get(int*,triangles,i)))[0]))))[1])).data));
    (s=w_str_cat(s," L"));
    (s=w_str_cat(s,w_flt2str(((((float*)w_arr_get(float*,pxyz,((((int*)w_arr_get(int*,triangles,i)))[1]))))[0])).data));
    (s=w_str_cat(s,","));
    (s=w_str_cat(s,w_flt2str(((((float*)w_arr_get(float*,pxyz,((((int*)w_arr_get(int*,triangles,i)))[1]))))[1])).data));
    (s=w_str_cat(s," L"));
    (s=w_str_cat(s,w_flt2str(((((float*)w_arr_get(float*,pxyz,((((int*)w_arr_get(int*,triangles,i)))[2]))))[0])).data));
    (s=w_str_cat(s,","));
    (s=w_str_cat(s,w_flt2str(((((float*)w_arr_get(float*,pxyz,((((int*)w_arr_get(int*,triangles,i)))[2]))))[1])).data));
    (s=w_str_cat(s," z\" fill=\"rgba(0,0,0,0.1)\" stroke-width=\"1\" stroke=\"black\"/>"));
  };
  (s=w_str_cat(s,"</svg>"));
  return s;
}
int main(){
  w_arr_t* pxyz=0;
  (pxyz=w_arr_new(float*));
  int w=0;
  (w=400);
  int h=0;
  (h=400);
  for(int i=0;(i<5);i+=1){
    w_arr_insert(float*,pxyz,(pxyz->len),w_vec_new_flts(2,((random()*((float)w))),((random()*((float)h)))));
  };
  sortbyx(pxyz,0,((pxyz->len)-1));
  w_arr_t* triangles=0;
  (triangles=delaunaytriangulate(pxyz));
  char* s=0;
  (s=render_svg(w,h,pxyz,triangles));
  puts(s);
  for(int i=0;(i<(triangles->len));i+=1){
    w_free(((int*)w_arr_get(int*,triangles,i)));
  };
  for(int i=0;(i<(pxyz->len));i+=1){
    w_free(((float*)w_arr_get(float*,pxyz,i)));
  };
  w_free_arr(pxyz);
  w_free(s);
  w_free_arr(triangles);
  return 0;
}
/*=== User Code            END   ===*/
